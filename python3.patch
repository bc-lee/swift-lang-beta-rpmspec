diff -Naur swift-orig/stdlib/public/core/FloatingPointTypes.swift.gyb swift/stdlib/public/core/FloatingPointTypes.swift.gyb
--- swift-orig/stdlib/public/core/FloatingPointTypes.swift.gyb	2019-07-14 15:16:38.000000000 -0500
+++ swift/stdlib/public/core/FloatingPointTypes.swift.gyb	2019-07-22 11:22:17.049551459 -0500
@@ -13,8 +13,8 @@
 import SwiftShims
 
 %{
-from SwiftIntTypes import all_integer_types
-from SwiftFloatingPointTypes import all_floating_point_types
+import SwiftIntTypes 
+import SwiftFloatingPointTypes
 
 #
 # Utility code for later in this template
@@ -27,7 +27,7 @@
 builtinIntLiteralBits = 2048
 }%
 
-% for self_type in all_floating_point_types():
+% for self_type in SwiftFloatingPointTypes.all_floating_point_types():
 %{
 Self = self_type.stdlib_name
 bits = self_type.bits
@@ -1650,7 +1650,7 @@
     }
   }
 
-% for src_type in all_floating_point_types():
+% for src_type in SwiftFloatingPointTypes.all_floating_point_types():
 %   srcBits = src_type.bits
 %   That = src_type.stdlib_name
 
diff -Naur swift-orig/stdlib/public/core/IntegerTypes.swift.gyb swift/stdlib/public/core/IntegerTypes.swift.gyb
--- swift-orig/stdlib/public/core/IntegerTypes.swift.gyb	2019-07-14 15:16:38.000000000 -0500
+++ swift/stdlib/public/core/IntegerTypes.swift.gyb	2019-07-22 15:30:40.491317722 -0500
@@ -14,10 +14,9 @@
 # Utility code for later in this template
 #
 
-from SwiftIntTypes import all_integer_types, int_max_bits, should_define_truncating_bit_pattern_init
-from SwiftFloatingPointTypes import getFtoIBounds
+import SwiftIntTypes 
+import SwiftFloatingPointTypes 
 
-from string import maketrans, capitalize
 from itertools import chain
 
 # Number of bits in the Builtin.Word type
@@ -1064,7 +1063,7 @@
 //===--- Concrete FixedWidthIntegers --------------------------------------===//
 //===----------------------------------------------------------------------===//
 
-% for self_type in all_integer_types(word_bits):
+% for self_type in SwiftIntTypes.all_integer_types(word_bits):
 %   bits = self_type.bits
 %   signed = self_type.is_signed
 %   BuiltinName = self_type.builtin_name
@@ -1125,7 +1124,7 @@
 
 %   for (FloatType, FloatBits) in [
 %     ('Float', 32), ('Double', 64), ('Float80', 80)]:
-%     (lower, upper) = getFtoIBounds(floatBits=FloatBits, intBits=int(bits), signed=signed)
+%     (lower, upper) = SwiftFloatingPointTypes.getFtoIBounds(floatBits=FloatBits, intBits=int(bits), signed=signed)
 
 %     if FloatType == 'Float80':
 #if !os(Windows) && (arch(i386) || arch(x86_64))
@@ -1651,7 +1650,7 @@
     return Hasher._hash(
       seed: seed,
       bytes: UInt64(truncatingIfNeeded: ${U}${Self}(_value)),
-      count: ${bits / 8})
+      count: ${bits // 8})
     % end
   }
 }
diff -Naur swift-orig/stdlib/public/core/Mirrors.swift.gyb swift/stdlib/public/core/Mirrors.swift.gyb
--- swift-orig/stdlib/public/core/Mirrors.swift.gyb	2019-07-14 15:16:38.000000000 -0500
+++ swift/stdlib/public/core/Mirrors.swift.gyb	2019-07-23 09:20:38.269152361 -0500
@@ -12,7 +12,7 @@
 
 %{
 
-from SwiftIntTypes import all_integer_types
+import SwiftIntTypes
 
 # Number of bits in the Builtin.Word type
 word_bits = int(CMAKE_SIZEOF_VOID_P) * 8
@@ -26,7 +26,7 @@
     ('Unicode.Scalar', '.uInt', 'UInt64(self)'),
 ]
 
-for self_ty in all_integer_types(word_bits):
+for self_ty in SwiftIntTypes.all_integer_types(word_bits):
   Self = self_ty.stdlib_name
   if self_ty.is_signed:
     Types.append( (Self, '.int', 'Int64(self)') )
diff -Naur swift-orig/stdlib/public/core/SIMDVectorTypes.swift.gyb swift/stdlib/public/core/SIMDVectorTypes.swift.gyb
--- swift-orig/stdlib/public/core/SIMDVectorTypes.swift.gyb	2019-07-14 15:16:38.000000000 -0500
+++ swift/stdlib/public/core/SIMDVectorTypes.swift.gyb	2019-07-22 15:30:52.516752476 -0500
@@ -11,7 +11,7 @@
 //===----------------------------------------------------------------------===//
 
 %{
-from SwiftIntTypes import all_integer_types
+import SwiftIntTypes 
 word_bits = int(CMAKE_SIZEOF_VOID_P) * 8
 storagescalarCounts = [2,4,8,16,32,64]
 vectorscalarCounts = storagescalarCounts + [3]
@@ -90,17 +90,17 @@
 % if n >= 4:
   /// Creates a new vector from two half-length vectors.
   @_transparent
-  public init(lowHalf: SIMD${n/2}<Scalar>, highHalf: SIMD${n/2}<Scalar>) {
+  public init(lowHalf: SIMD${n//2}<Scalar>, highHalf: SIMD${n//2}<Scalar>) {
     self.init()
     self.lowHalf = lowHalf
     self.highHalf = highHalf
   }
 
-%  for (half,indx) in [('low','i'), ('high',str(n/2)+'+i'), ('even','2*i'), ('odd','2*i+1')]:
+%  for (half,indx) in [('low','i'), ('high',str(n//2)+'+i'), ('even','2*i'), ('odd','2*i+1')]:
   /// A half-length vector made up of the ${half} elements of the vector.
-  public var ${half}Half: SIMD${n/2}<Scalar> {
+  public var ${half}Half: SIMD${n//2}<Scalar> {
     @inlinable get {
-      var result = SIMD${n/2}<Scalar>()
+      var result = SIMD${n//2}<Scalar>()
       for i in result.indices { result[i] = self[${indx}] }
       return result
     }
@@ -159,7 +159,7 @@
   public var debugDescription: String {
     return "SIMD${n}<\(Scalar.self)>(${', '.join(map(lambda c:
                        '\\(self['+ str(c) + '])',
-                       xrange(n)))})"
+                       range(n)))})"
   }
 }
 
@@ -203,7 +203,7 @@
   }
 }
 
-%for self_type in all_integer_types(word_bits):
+%for self_type in SwiftIntTypes.all_integer_types(word_bits):
 % Self = self_type.stdlib_name
 % BuiltinName = self_type.builtin_name
 % Mask = Self if self_type.is_signed else self_type.get_opposite_signedness().stdlib_name
@@ -212,7 +212,7 @@
   public typealias SIMDMaskScalar = ${Mask}
 
 % for n in storagescalarCounts:
-%  bytes = n * self_type.bits / 8
+%  bytes = n * self_type.bits // 8
   /// Storage for a vector of ${spelledNumbers[n]} integers.
   @frozen
   @_alignment(${bytes if bytes <= 16 else 16})
@@ -257,7 +257,7 @@
   public typealias SIMDMaskScalar = Int${bits}
 
 % for n in storagescalarCounts:
-%  bytes = n * bits / 8
+%  bytes = n * bits // 8
   /// Storage for a vector of ${spelledNumbers[n]} floating-point values.
   @frozen
   @_alignment(${bytes if bytes <= 16 else 16})
diff -Naur swift-orig/stdlib/public/core/Tuple.swift.gyb swift/stdlib/public/core/Tuple.swift.gyb
--- swift-orig/stdlib/public/core/Tuple.swift.gyb	2019-07-14 15:16:38.000000000 -0500
+++ swift/stdlib/public/core/Tuple.swift.gyb	2019-07-17 20:54:45.400558556 -0500
@@ -111,7 +111,7 @@
 %   equatableTypeParams = ", ".join(["{} : Equatable".format(c) for c in typeParams])
 
 %   originalTuple = "(\"a\", {})".format(", ".join(map(str, range(1, arity))))
-%   greaterTuple = "(\"a\", {})".format(", ".join(map(str, range(1, arity - 1) + [arity])))
+%   greaterTuple = "(\"a\", {})".format(", ".join(map(str, list(range(1, arity - 1)) + [arity])))
 
 /// Returns a Boolean value indicating whether the corresponding components of
 /// two tuples are equal.
diff -Naur swift-orig/utils/gyb_sourcekit_support/__init__.py swift/utils/gyb_sourcekit_support/__init__.py
--- swift-orig/utils/gyb_sourcekit_support/__init__.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_sourcekit_support/__init__.py	2019-07-18 14:19:45.668770778 -0500
@@ -14,9 +14,9 @@
 # utils/gyb_sourcekit_support/ directory as a module.
 #
 # ----------------------------------------------------------------------------
-from UIDs import UID_KEYS
-from UIDs import UID_KINDS
-from UIDs import UID_REQUESTS
+from .UIDs import UID_KEYS
+from .UIDs import UID_KINDS
+from .UIDs import UID_REQUESTS
 
 
 def check_uid_duplication():
diff -Naur swift-orig/utils/gyb_syntax_support/AttributeNodes.py swift/utils/gyb_syntax_support/AttributeNodes.py
--- swift-orig/utils/gyb_syntax_support/AttributeNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/AttributeNodes.py	2019-07-18 12:34:20.708714660 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 ATTRIBUTE_NODES = [
     # token-list -> token? token-list?
diff -Naur swift-orig/utils/gyb_syntax_support/AvailabilityNodes.py swift/utils/gyb_syntax_support/AvailabilityNodes.py
--- swift-orig/utils/gyb_syntax_support/AvailabilityNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/AvailabilityNodes.py	2019-07-18 12:34:20.711714774 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 AVAILABILITY_NODES = [
     # availability-spec-list -> availability-entry availability-spec-list?
diff -Naur swift-orig/utils/gyb_syntax_support/Child.py swift/utils/gyb_syntax_support/Child.py
--- swift-orig/utils/gyb_syntax_support/Child.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/Child.py	2019-07-18 12:34:20.712714811 -0500
@@ -1,7 +1,7 @@
 # flake8: noqa I201
-from Classification import classification_by_name
-from Token import SYNTAX_TOKEN_MAP
-from kinds import SYNTAX_BASE_KINDS, kind_to_type, lowercase_first_word
+from .Classification import classification_by_name
+from .Token import SYNTAX_TOKEN_MAP
+from .kinds import SYNTAX_BASE_KINDS, kind_to_type, lowercase_first_word
 
 
 class Child(object):
diff -Naur swift-orig/utils/gyb_syntax_support/Classification.py swift/utils/gyb_syntax_support/Classification.py
--- swift-orig/utils/gyb_syntax_support/Classification.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/Classification.py	2019-07-18 12:34:20.713714849 -0500
@@ -1,5 +1,5 @@
-from Node import error
-from kinds import lowercase_first_word  # noqa: I201
+from .Node import error
+from .kinds import lowercase_first_word  # noqa: I201
 
 
 class SyntaxClassification(object):
diff -Naur swift-orig/utils/gyb_syntax_support/CommonNodes.py swift/utils/gyb_syntax_support/CommonNodes.py
--- swift-orig/utils/gyb_syntax_support/CommonNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/CommonNodes.py	2019-07-18 12:34:20.714714887 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 COMMON_NODES = [
     Node('Decl', kind='Syntax'),
diff -Naur swift-orig/utils/gyb_syntax_support/DeclNodes.py swift/utils/gyb_syntax_support/DeclNodes.py
--- swift-orig/utils/gyb_syntax_support/DeclNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/DeclNodes.py	2019-07-18 12:34:20.716714963 -0500
@@ -1,6 +1,6 @@
 # flake8: noqa I201
-from Child import Child
-from Node import Node
+from .Child import Child
+from .Node import Node
 
 
 DECL_NODES = [
diff -Naur swift-orig/utils/gyb_syntax_support/ExprNodes.py swift/utils/gyb_syntax_support/ExprNodes.py
--- swift-orig/utils/gyb_syntax_support/ExprNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/ExprNodes.py	2019-07-18 12:34:20.717715000 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 EXPR_NODES = [
     # An inout expression.
diff -Naur swift-orig/utils/gyb_syntax_support/GenericNodes.py swift/utils/gyb_syntax_support/GenericNodes.py
--- swift-orig/utils/gyb_syntax_support/GenericNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/GenericNodes.py	2019-07-18 12:34:20.718715038 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 GENERIC_NODES = [
     # generic-where-clause -> 'where' requirement-list
diff -Naur swift-orig/utils/gyb_syntax_support/__init__.py swift/utils/gyb_syntax_support/__init__.py
--- swift-orig/utils/gyb_syntax_support/__init__.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/__init__.py	2019-07-18 12:34:33.973215999 -0500
@@ -1,19 +1,19 @@
 import textwrap
-from AttributeNodes import ATTRIBUTE_NODES  # noqa: I201
-from AvailabilityNodes import AVAILABILITY_NODES  # noqa: I201
-import Classification  # noqa: I201
-from CommonNodes import COMMON_NODES  # noqa: I201
-from DeclNodes import DECL_NODES  # noqa: I201
-from ExprNodes import EXPR_NODES  # noqa: I201
-from GenericNodes import GENERIC_NODES  # noqa: I201
-from NodeSerializationCodes import SYNTAX_NODE_SERIALIZATION_CODES, \
+from .AttributeNodes import ATTRIBUTE_NODES  # noqa: I201
+from .AvailabilityNodes import AVAILABILITY_NODES  # noqa: I201
+from . import Classification  # noqa: I201
+from .CommonNodes import COMMON_NODES  # noqa: I201
+from .DeclNodes import DECL_NODES  # noqa: I201
+from .ExprNodes import EXPR_NODES  # noqa: I201
+from .GenericNodes import GENERIC_NODES  # noqa: I201
+from .NodeSerializationCodes import SYNTAX_NODE_SERIALIZATION_CODES, \
     get_serialization_code, \
     verify_syntax_node_serialization_codes
 
-from PatternNodes import PATTERN_NODES  # noqa: I201
-from StmtNodes import STMT_NODES  # noqa: I201
-import Token
-from TypeNodes import TYPE_NODES  # noqa: I201
+from .PatternNodes import PATTERN_NODES  # noqa: I201
+from .StmtNodes import STMT_NODES  # noqa: I201
+from . import Token
+from .TypeNodes import TYPE_NODES  # noqa: I201
 
 
 # Re-export global constants
diff -Naur swift-orig/utils/gyb_syntax_support/Node.py swift/utils/gyb_syntax_support/Node.py
--- swift-orig/utils/gyb_syntax_support/Node.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/Node.py	2019-07-18 12:34:20.722715189 -0500
@@ -1,6 +1,6 @@
 from __future__ import print_function
 import sys  # noqa: I201
-from kinds import SYNTAX_BASE_KINDS, kind_to_type, lowercase_first_word
+from .kinds import SYNTAX_BASE_KINDS, kind_to_type, lowercase_first_word
 
 
 def error(msg):
diff -Naur swift-orig/utils/gyb_syntax_support/NodeSerializationCodes.py swift/utils/gyb_syntax_support/NodeSerializationCodes.py
--- swift-orig/utils/gyb_syntax_support/NodeSerializationCodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/NodeSerializationCodes.py	2019-07-18 12:34:20.723715227 -0500
@@ -1,4 +1,4 @@
-from Node import error
+from .Node import error
 
 
 SYNTAX_NODE_SERIALIZATION_CODES = {
diff -Naur swift-orig/utils/gyb_syntax_support/PatternNodes.py swift/utils/gyb_syntax_support/PatternNodes.py
--- swift-orig/utils/gyb_syntax_support/PatternNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/PatternNodes.py	2019-07-18 12:34:20.724715265 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 PATTERN_NODES = [
 
diff -Naur swift-orig/utils/gyb_syntax_support/StmtNodes.py swift/utils/gyb_syntax_support/StmtNodes.py
--- swift-orig/utils/gyb_syntax_support/StmtNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/StmtNodes.py	2019-07-18 12:34:20.726715341 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 STMT_NODES = [
     # continue-stmt -> 'continue' label? ';'?
diff -Naur swift-orig/utils/gyb_syntax_support/Token.py swift/utils/gyb_syntax_support/Token.py
--- swift-orig/utils/gyb_syntax_support/Token.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/Token.py	2019-07-18 12:34:20.727715378 -0500
@@ -1,6 +1,6 @@
-from Classification import classification_by_name
-from Node import error  # noqa: I201
-from kinds import lowercase_first_word  # noqa: I201
+from .Classification import classification_by_name
+from .Node import error  # noqa: I201
+from .kinds import lowercase_first_word  # noqa: I201
 
 
 class Token(object):
diff -Naur swift-orig/utils/gyb_syntax_support/Trivia.py swift/utils/gyb_syntax_support/Trivia.py
--- swift-orig/utils/gyb_syntax_support/Trivia.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/Trivia.py	2019-07-18 14:22:04.074001913 -0500
@@ -1,5 +1,5 @@
-from Node import error
-from kinds import lowercase_first_word  # noqa: I201
+from .Node import error
+from .kinds import lowercase_first_word  # noqa: I201
 
 
 class Trivia(object):
diff -Naur swift-orig/utils/gyb_syntax_support/TypeNodes.py swift/utils/gyb_syntax_support/TypeNodes.py
--- swift-orig/utils/gyb_syntax_support/TypeNodes.py	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/gyb_syntax_support/TypeNodes.py	2019-07-18 12:34:20.731715529 -0500
@@ -1,5 +1,5 @@
-from Child import Child
-from Node import Node  # noqa: I201
+from .Child import Child
+from .Node import Node  # noqa: I201
 
 TYPE_NODES = [
     # simple-type-identifier -> identifier generic-argument-clause?
diff -Naur swift-orig/utils/line-directive swift/utils/line-directive
--- swift-orig/utils/line-directive	2019-07-14 15:16:38.000000000 -0500
+++ swift/utils/line-directive	2019-07-19 09:01:35.602482603 -0500
@@ -60,7 +60,7 @@
 
 def _make_line_map(target_filename, stream=None):
     """
-    >>> from StringIO import StringIO
+    >>> from io import StringIO
     >>> _make_line_map('box',
     ... StringIO('''// ###sourceLocation(file: "foo.bar", line: 3)
     ... line 2
@@ -94,7 +94,7 @@
 
 def map_line_to_source_file(target_filename, target_line_num):
     """
-    >>> from tempfile import *
+    >>> from .tempfile import *
     >>> # On Windows, the name of a NamedTemporaryFile cannot be used to open
     >>> # the file for a second time if delete=True. Therefore, we have to
     >>> # manually handle closing and deleting this file to allow us to open
@@ -144,7 +144,7 @@
 def map_line_from_source_file(source_filename, source_line_num,
                               target_filename):
     """
-    >>> from tempfile import *
+    >>> from .tempfile import *
     >>> # On Windows, the name of a NamedTemporaryFile cannot be used to open
     >>> # the file for a second time if delete=True. Therefore, we have to
     >>> # manually handle closing and deleting this file to allow us to open
@@ -230,7 +230,7 @@
 def run():
     """Simulate a couple of gyb-generated files
 
-    >>> from tempfile import *
+    >>> from .tempfile import *
     >>> # On Windows, the name of a NamedTemporaryFile cannot be used to open
     >>> # the file for a second time if delete=True. Therefore, we have to
     >>> # manually handle closing and deleting this file to allow us to open
